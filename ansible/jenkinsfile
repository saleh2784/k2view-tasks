pipeline {
    options {
      ansiColor('xterm')
    }
    agent any
    
    parameters {
        // choice (name: 'vim', choices: ['install', 'uninstall', 'copy', 'run'],)
        choice (name: 'vim', choices: ['install', 'uninstall', 'nothing'],)
        choice (name: 'copy', choices: ['yes', 'no'],)
        choice (name: 'run', choices: ['yes', 'no'],)


    }

    stages {
        stage('Clean') {
            steps {
                cleanWs()
            }
        }
        stage('Get SCM') {
            steps {
                git branch: "main", url: 'https://github.com/saleh2784/k2view-tasks.git'
            }
        }
        stage('install'){
        when {
          expression {
            params.vim == "install"
          }
        }
            steps{
            ansiblePlaybook(
                playbook: "ansible/vim_install.yml",
                inventory: "ansible/host.ini",
                become: 'yes',
                extras: '-vvv',
                forks: 1,
                disableHostKeyChecking: true,
                credentialsId: 'ssh',
                colorized: true
          )
            }
        }
        stage('uninstall'){
        when {
          expression {
            params.vim == "uninstall"
          }
        }
            steps{
            ansiblePlaybook(
                playbook: "ansible/vim_uninstall.yml",
                inventory: "ansible/host.ini",
                become: 'yes',
                extras: '-vvv',
                forks: 1,
                disableHostKeyChecking: true,
                credentialsId: 'ssh',
                colorized: true
          )
            }
        }
        stage('copy'){
        when {
          expression {
            params.copy == "yes"
          }
        }
            steps{
            ansiblePlaybook(
                playbook: "ansible/copy.yml",
                inventory: "ansible/host.ini",
                become: 'yes',
                extras: '-vvv',
                disableHostKeyChecking: true,
                credentialsId: 'ssh',
                colorized: true
          )
            }
        }
        stage('run'){
        when {
          expression {
            params.run == "yes"
          }
        }
            steps{
            ansiblePlaybook(
                playbook: "ansible/run.yml",
                inventory: "ansible/host.ini",
                become: 'yes',
                extras: '-vvv',
                disableHostKeyChecking: true,
                credentialsId: 'ssh',
                colorized: true
          )
            }
        }
		// 	steps {
		// 	    ansiblePlaybook(
        //         // installation:'ansible', 
        //         // limit:'',
        //         playbook: "ansible/vim_${params.proccess}.yml",
        //         inventory: "ansible/host.ini",
        //         become: 'yes',
        //         extras: '-v',
        //         forks: 1,
        //         disableHostKeyChecking: true,
        //         credentialsId: 'ssh',
        //         colorized: true
        //   )
		// 	}
		// }


    }

}
